#include <iostream>
#include <vector>
#include <queue>
#include <random>
#include <map>
#include <algorithm>
#define N 7
using namespace std;
void BFS(int start, const vector<vector<int>>& Network, vector<vector<vector<int>>>& PATH, vector<vector<bool>>& connected) {
    vector<bool> seen(N, false);
    map<int, int> reverseNode;
    queue<int> q;
    q.push(start);
    seen[start] = true;
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        for (int nextnode : Network[node]) {
            if (!seen[nextnode]) {
                q.push(nextnode);
                reverseNode[nextnode] = node;
                seen[nextnode] = true;
            }
        }
    }
    for (int i = 0; i < N; i++) {
        if (i == start) continue;
        if (!seen[i]) {
            connected[start][i] = false;
            continue;
        }
        int current = i;
        PATH[start][i].push_back(i);
        while (reverseNode.find(current) != reverseNode.end() && reverseNode[current] != start) {
            PATH[start][i].push_back(reverseNode[current]);
            current = reverseNode[current];
        }
        PATH[start][i].push_back(start);
        reverse(PATH[start][i].begin(), PATH[start][i].end());
    }
}
void FindPath(vector<vector<int>>& Network, vector<vector<vector<int>>>& PATH) {
    vector<vector<bool>> connected(N, vector<bool>(N, true));
    for (int m = 0; m < N; m++)
        BFS(m, Network, PATH, connected);
    
}
int main() {
    //创建图的邻接矩阵
    vector<vector<int>> Network(N, vector<int>(N, 0));
    vector<vector<int>> network(N, vector<int>());
    Network[0][1]++;
    Network[0][2]++;
    Network[0][3]++;
    Network[0][4]++;
    Network[1][2]++;
    Network[1][3]++;
    Network[2][4]++;
    Network[3][4]++;
    Network[3][5]++;
    Network[3][6]++;
    Network[5][6]++;
    for (int i = 0; i < N; i++) {
        for (int j = i + 1; j < N; j++) {
            if (Network[i][j] == 1) {
                Network[j][i]++;
                network[i].push_back(j);
                network[j].push_back(i);
            }
        }
    }
    //每个点的度
    vector<int> Deg(N, 0);
    for (int i = 0; i < N; i++) {
        for (int j = i + 1; j < N; j++) {
            if (Network[i][j] == 1) {
                Deg[i]++;
                Deg[j]++;
            }
        }
    }
    cout << "每个点的度"<<'\n' << endl;
    for (int i = 0; i < N; i++)
        cout << "点  "<<i+1<<" 的度是 " << Deg[i] << endl;
    
    //平均度
    int Sum = 0;
    for (int i = 0; i < N; i++)
        Sum += Deg[i];
    int average_Deg = Sum / N;
    cout << "平均度:  " <<average_Deg<< '\n' << endl;
    //密度
    double MAXEDGE = N * (N - 1);
    double p = Sum / MAXEDGE;
    cout << "密度:  " << p << '\n' << endl;

    vector<vector<vector<int>>> PATH(N, vector<vector<int>>(N, vector<int>()));
    FindPath(network,PATH);
    //检索PATH，检查每个点
    vector<int> NodeEccent(N, 0);
    for (int i = 0; i < N; i++) {
        int CurrentEccentricity = 0;
        for (int j = 0; j < N; j++) {
            if (i == j) continue;
            if ((PATH[i][j].size() - 1) > CurrentEccentricity) {
                CurrentEccentricity = PATH[i][j].size() - 1;
            }
        }
        NodeEccent[i] = CurrentEccentricity;
        cout << "点  " << i + 1 << "  的离心率是  " << CurrentEccentricity << endl;
    }
    int InitialDia1 = NodeEccent[0];//半径
    int InitialDia2 = NodeEccent[0];//直径

    for (int i = 1; i < N; i++) {
        if (InitialDia1 > NodeEccent[i])
            InitialDia1 = NodeEccent[i];
    }
    cout << "半径  " << InitialDia1 << '\n' << endl;
    for (int i = 1; i < N; i++) {
        if (InitialDia2 < NodeEccent[i])
            InitialDia2 = NodeEccent[i];
    }
    cout << "直径  " << InitialDia2 << '\n' << endl;
    vector<double> ActualEdge(N, 0);
    vector<double> AssumeEdge(N, 0);
    double m = 1 / 3;
    for (int i = 0; i < N; i++) {
        int size0 = network[i].size();
        AssumeEdge[i] = size0 * (size0 - 1) / 2;
        for (int j = 0; j < N; j++) {
            for (int k = 0; k < N; k++) {
                if (Network[i][j] && Network[k][j] && Network[i][k])
                {
                    ActualEdge[i]+=0.5;
                }
            }
        }
    }
    vector<double> EccentEdge(N, 0);
    double SUM = 0;
    for (int i = 0; i < N; i++) {
        EccentEdge[i] = ActualEdge[i]/AssumeEdge[i];
        SUM += EccentEdge[i];
        cout << "点  " << i + 1 << "  的聚类系数是  " << EccentEdge[i] << endl;
    }
    cout << "图的聚类系数  " << SUM/N << '\n' << endl;
}
